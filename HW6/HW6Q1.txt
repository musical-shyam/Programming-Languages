# Python
# I found that recursion was as the most convenient construct that python allowed
# It helps us divide the problem into sub problems that had similar functioning, making us reuse the part of code again and again.
# A while loop can also be used here instead, that could even be simpler to read than recursion which I used. but I feel that recursion helps me understand and code the problem much clearly and sometimes reduce the number of lines of code making it better than while loop.
# It is much better than 'for' loop, cause we don't exactly know when the iteration ends.



arr = [2, 3, 4, 5, 22, 23, 75, 87]
arr.sort()

def binary_search(begin, end, n):
	mid = (begin + end)//2
	if(begin > end):
		return None
	if(arr[mid] == n):
		return mid
	elif(arr[mid]>n):
		return binary_search(begin,mid-1,n)
	elif(arr[mid]<n):
		return binary_search(mid + 1, end,n)
 
index = binary_search(0, len(arr)-1, 53)
if(index == None):
	print("not inside the array")
else:
	print("the number is in the sorted array at index ", index)
	
		
		